// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from EO_API.djinni

#pragma once

#include "LensConfig_s.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class LensConfigS final {
public:
    using CppType = ::eo_api::LensConfigS;
    using JniType = jobject;

    using Boxed = LensConfigS;

    ~LensConfigS();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    LensConfigS();
    friend ::djinni::JniClass<LensConfigS>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/srcinc/eo_api/LensConfigS") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(SSSSSS)V") };
    const jfieldID field_Analog1 { ::djinni::jniGetFieldID(clazz.get(), "Analog1", "S") };
    const jfieldID field_Analog2 { ::djinni::jniGetFieldID(clazz.get(), "Analog2", "S") };
    const jfieldID field_Analog3 { ::djinni::jniGetFieldID(clazz.get(), "Analog3", "S") };
    const jfieldID field_Analog4 { ::djinni::jniGetFieldID(clazz.get(), "Analog4", "S") };
    const jfieldID field_Digital1 { ::djinni::jniGetFieldID(clazz.get(), "Digital1", "S") };
    const jfieldID field_Digital2 { ::djinni::jniGetFieldID(clazz.get(), "Digital2", "S") };
};

}  // namespace djinni_generated
