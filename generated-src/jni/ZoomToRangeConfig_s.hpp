// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from EO_API.djinni

#pragma once

#include "ZoomToRangeConfig_s.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class ZoomToRangeConfigS final {
public:
    using CppType = ::eo_api::ZoomToRangeConfigS;
    using JniType = jobject;

    using Boxed = ZoomToRangeConfigS;

    ~ZoomToRangeConfigS();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    ZoomToRangeConfigS();
    friend ::djinni::JniClass<ZoomToRangeConfigS>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/srcinc/eo_api/ZoomToRangeConfigS") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(SSBDDSS)V") };
    const jfieldID field_VideoSource { ::djinni::jniGetFieldID(clazz.get(), "VideoSource", "S") };
    const jfieldID field_Enable { ::djinni::jniGetFieldID(clazz.get(), "Enable", "S") };
    const jfieldID field_UseSinglePointAlgorithm { ::djinni::jniGetFieldID(clazz.get(), "UseSinglePointAlgorithm", "B") };
    const jfieldID field_MinLensFOV { ::djinni::jniGetFieldID(clazz.get(), "MinLensFOV", "D") };
    const jfieldID field_MaxLensFOV { ::djinni::jniGetFieldID(clazz.get(), "MaxLensFOV", "D") };
    const jfieldID field_MinRange { ::djinni::jniGetFieldID(clazz.get(), "MinRange", "S") };
    const jfieldID field_MaxRange { ::djinni::jniGetFieldID(clazz.get(), "MaxRange", "S") };
};

}  // namespace djinni_generated
