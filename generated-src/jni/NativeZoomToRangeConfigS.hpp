// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from EO_API.djinni

#pragma once

#include "ZoomToRangeConfig_s.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeZoomToRangeConfigS final {
public:
    using CppType = ::helloworld::ZoomToRangeConfigS;
    using JniType = jobject;

    using Boxed = NativeZoomToRangeConfigS;

    ~NativeZoomToRangeConfigS();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativeZoomToRangeConfigS();
    friend ::djinni::JniClass<NativeZoomToRangeConfigS>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/mycompany/helloworld/ZoomToRangeConfigS") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(SSBDDSS)V") };
    const jfieldID field_mVideoSource { ::djinni::jniGetFieldID(clazz.get(), "mVideoSource", "S") };
    const jfieldID field_mEnable { ::djinni::jniGetFieldID(clazz.get(), "mEnable", "S") };
    const jfieldID field_mUseSinglePointAlgorithm { ::djinni::jniGetFieldID(clazz.get(), "mUseSinglePointAlgorithm", "B") };
    const jfieldID field_mMinLensFOV { ::djinni::jniGetFieldID(clazz.get(), "mMinLensFOV", "D") };
    const jfieldID field_mMaxLensFOV { ::djinni::jniGetFieldID(clazz.get(), "mMaxLensFOV", "D") };
    const jfieldID field_mMinRange { ::djinni::jniGetFieldID(clazz.get(), "mMinRange", "S") };
    const jfieldID field_mMaxRange { ::djinni::jniGetFieldID(clazz.get(), "mMaxRange", "S") };
};

}  // namespace djinni_generated
