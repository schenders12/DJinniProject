// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from EO_API.djinni

#include "NativeLensSerialZoomS.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeLensSerialZoomS::NativeLensSerialZoomS() = default;

NativeLensSerialZoomS::~NativeLensSerialZoomS() = default;

auto NativeLensSerialZoomS::fromCpp(JNIEnv* jniEnv, const CppType& c) -> ::djinni::LocalRef<JniType> {
    const auto& data = ::djinni::JniClass<NativeLensSerialZoomS>::get();
    auto r = ::djinni::LocalRef<JniType>{jniEnv->NewObject(data.clazz.get(), data.jconstructor,
                                                           ::djinni::get(::djinni::I16::fromCpp(jniEnv, c.LensType)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.LensID)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.VideoSource)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.SerialPort)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.ZoomCmd)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.FocusCmd)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.IrisCmd)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.IrisAuto)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.ZoomCal)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.UseOldProtocol)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.Enable2X)),
                                                           ::djinni::get(::djinni::F64::fromCpp(jniEnv, c.ZoomFov)),
                                                           ::djinni::get(::djinni::F64::fromCpp(jniEnv, c.MinFov)),
                                                           ::djinni::get(::djinni::F64::fromCpp(jniEnv, c.MaxFov)),
                                                           ::djinni::get(::djinni::I16::fromCpp(jniEnv, c.FocusPosition)))};
    ::djinni::jniExceptionCheck(jniEnv);
    return r;
}

auto NativeLensSerialZoomS::toCpp(JNIEnv* jniEnv, JniType j) -> CppType {
    ::djinni::JniLocalScope jscope(jniEnv, 16);
    assert(j != nullptr);
    const auto& data = ::djinni::JniClass<NativeLensSerialZoomS>::get();
    return {::djinni::I16::toCpp(jniEnv, jniEnv->GetShortField(j, data.field_mLensType)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_mLensID)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_mVideoSource)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_mSerialPort)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_mZoomCmd)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_mFocusCmd)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_mIrisCmd)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_mIrisAuto)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_mZoomCal)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_mUseOldProtocol)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_mEnable2X)),
            ::djinni::F64::toCpp(jniEnv, jniEnv->GetDoubleField(j, data.field_mZoomFov)),
            ::djinni::F64::toCpp(jniEnv, jniEnv->GetDoubleField(j, data.field_mMinFov)),
            ::djinni::F64::toCpp(jniEnv, jniEnv->GetDoubleField(j, data.field_mMaxFov)),
            ::djinni::I16::toCpp(jniEnv, jniEnv->GetShortField(j, data.field_mFocusPosition))};
}

}  // namespace djinni_generated
