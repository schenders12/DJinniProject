// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from EO_API.djinni

#pragma once

#include "LensConfig_s.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeLensConfigS final {
public:
    using CppType = ::helloworld::LensConfigS;
    using JniType = jobject;

    using Boxed = NativeLensConfigS;

    ~NativeLensConfigS();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativeLensConfigS();
    friend ::djinni::JniClass<NativeLensConfigS>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/mycompany/helloworld/LensConfigS") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(SSSSSS)V") };
    const jfieldID field_mAnalog1 { ::djinni::jniGetFieldID(clazz.get(), "mAnalog1", "S") };
    const jfieldID field_mAnalog2 { ::djinni::jniGetFieldID(clazz.get(), "mAnalog2", "S") };
    const jfieldID field_mAnalog3 { ::djinni::jniGetFieldID(clazz.get(), "mAnalog3", "S") };
    const jfieldID field_mAnalog4 { ::djinni::jniGetFieldID(clazz.get(), "mAnalog4", "S") };
    const jfieldID field_mDigital1 { ::djinni::jniGetFieldID(clazz.get(), "mDigital1", "S") };
    const jfieldID field_mDigital2 { ::djinni::jniGetFieldID(clazz.get(), "mDigital2", "S") };
};

}  // namespace djinni_generated
