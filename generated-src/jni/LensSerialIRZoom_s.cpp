// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from EO_API.djinni

#include "LensSerialIRZoom_s.hpp"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

LensSerialIRZoomS::LensSerialIRZoomS() = default;

LensSerialIRZoomS::~LensSerialIRZoomS() = default;

auto LensSerialIRZoomS::fromCpp(JNIEnv* jniEnv, const CppType& c) -> ::djinni::LocalRef<JniType> {
    const auto& data = ::djinni::JniClass<LensSerialIRZoomS>::get();
    auto r = ::djinni::LocalRef<JniType>{jniEnv->NewObject(data.clazz.get(), data.jconstructor,
                                                           ::djinni::get(::djinni::I16::fromCpp(jniEnv, c.LensType)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.VideoSource)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.SerialPort)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.ZoomCmd)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.ZoomCal)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.FocusCmd)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.Polarity)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.AGC)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.DayMode)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.HighSensitivity)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.AutoCalibration)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.LensCover)),
                                                           ::djinni::get(::djinni::I8::fromCpp(jniEnv, c.FlirMenuCommand)),
                                                           ::djinni::get(::djinni::I16::fromCpp(jniEnv, c.ManualGain)),
                                                           ::djinni::get(::djinni::I16::fromCpp(jniEnv, c.ManualOffset)),
                                                           ::djinni::get(::djinni::I16::fromCpp(jniEnv, c.NonUniformityCorrectionTable)),
                                                           ::djinni::get(::djinni::F64::fromCpp(jniEnv, c.ZoomFov)),
                                                           ::djinni::get(::djinni::F64::fromCpp(jniEnv, c.MinFov)),
                                                           ::djinni::get(::djinni::F64::fromCpp(jniEnv, c.MaxFov)),
                                                           ::djinni::get(::djinni::I16::fromCpp(jniEnv, c.FocusPosition)))};
    ::djinni::jniExceptionCheck(jniEnv);
    return r;
}

auto LensSerialIRZoomS::toCpp(JNIEnv* jniEnv, JniType j) -> CppType {
    ::djinni::JniLocalScope jscope(jniEnv, 21);
    assert(j != nullptr);
    const auto& data = ::djinni::JniClass<LensSerialIRZoomS>::get();
    return {::djinni::I16::toCpp(jniEnv, jniEnv->GetShortField(j, data.field_LensType)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_VideoSource)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_SerialPort)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_ZoomCmd)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_ZoomCal)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_FocusCmd)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_Polarity)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_AGC)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_DayMode)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_HighSensitivity)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_AutoCalibration)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_LensCover)),
            ::djinni::I8::toCpp(jniEnv, jniEnv->GetByteField(j, data.field_FlirMenuCommand)),
            ::djinni::I16::toCpp(jniEnv, jniEnv->GetShortField(j, data.field_ManualGain)),
            ::djinni::I16::toCpp(jniEnv, jniEnv->GetShortField(j, data.field_ManualOffset)),
            ::djinni::I16::toCpp(jniEnv, jniEnv->GetShortField(j, data.field_NonUniformityCorrectionTable)),
            ::djinni::F64::toCpp(jniEnv, jniEnv->GetDoubleField(j, data.field_ZoomFov)),
            ::djinni::F64::toCpp(jniEnv, jniEnv->GetDoubleField(j, data.field_MinFov)),
            ::djinni::F64::toCpp(jniEnv, jniEnv->GetDoubleField(j, data.field_MaxFov)),
            ::djinni::I16::toCpp(jniEnv, jniEnv->GetShortField(j, data.field_FocusPosition))};
}

}  // namespace djinni_generated
