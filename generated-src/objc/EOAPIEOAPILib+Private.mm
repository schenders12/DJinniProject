// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from EO_API.djinni

#import "EOAPIEOAPILib+Private.h"
#import "EOAPIEOAPILib.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "EOAPILensConfigS+Private.h"
#import "EOAPILensSerialIRZoomS+Private.h"
#import "EOAPILensSerialZoomS+Private.h"
#import "EOAPIZoomToRangeConfigS+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface EOAPIEOAPILib ()

- (id)initWithCpp:(const std::shared_ptr<::eo_api::EOAPILib>&)cppRef;

@end

@implementation EOAPIEOAPILib {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::eo_api::EOAPILib>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::eo_api::EOAPILib>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (void)ILens {
    try {
        ::eo_api::EOAPILib::ILens();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)SetSerialZoom:(nonnull EOAPILensSerialZoomS *)zoom {
    try {
        _cppRefHandle.get()->SetSerialZoom(::djinni_generated::LensSerialZoomS::toCpp(zoom));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int16_t)QueryAllLensConfig:(int16_t)serialIRType {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->QueryAllLensConfig(::djinni::I16::toCpp(serialIRType));
        return ::djinni::I16::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull EOAPILensSerialZoomS *)ParseSerialZoomConfigMessage:(int8_t)data {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->ParseSerialZoomConfigMessage(::djinni::I8::toCpp(data));
        return ::djinni_generated::LensSerialZoomS::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)SetSerialIRZoom:(nonnull EOAPILensSerialIRZoomS *)zoom {
    try {
        _cppRefHandle.get()->SetSerialIRZoom(::djinni_generated::LensSerialIRZoomS::toCpp(zoom));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull EOAPILensSerialIRZoomS *)ParseSerialIRZoomConfigMessage:(int8_t)data {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->ParseSerialIRZoomConfigMessage(::djinni::I8::toCpp(data));
        return ::djinni_generated::LensSerialIRZoomS::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)SetZoomToRange:(nonnull EOAPIZoomToRangeConfigS *)config {
    try {
        _cppRefHandle.get()->SetZoomToRange(::djinni_generated::ZoomToRangeConfigS::toCpp(config));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull EOAPIZoomToRangeConfigS *)ParseZoomToRangeConfigMessage:(int8_t)data {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->ParseZoomToRangeConfigMessage(::djinni::I8::toCpp(data));
        return ::djinni_generated::ZoomToRangeConfigS::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)SetConnectionID:(int16_t)connectionID {
    try {
        _cppRefHandle.get()->SetConnectionID(::djinni::I16::toCpp(connectionID));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)SetLensConfig:(nonnull EOAPILensConfigS *)config {
    try {
        _cppRefHandle.get()->SetLensConfig(::djinni_generated::LensConfigS::toCpp(config));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull EOAPILensConfigS *)ParseLensConfigMessage:(int8_t)data {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->ParseLensConfigMessage(::djinni::I8::toCpp(data));
        return ::djinni_generated::LensConfigS::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto EOAPILib::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto EOAPILib::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<EOAPIEOAPILib>(cpp);
}

}  // namespace djinni_generated

@end
