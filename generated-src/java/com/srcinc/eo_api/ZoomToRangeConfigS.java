// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from EO_API.djinni

package com.srcinc.eo_api;

public final class ZoomToRangeConfigS {


    /*package*/ final short VideoSource;

    /*package*/ final short Enable;

    /*package*/ final byte UseSinglePointAlgorithm;

    /*package*/ final double MinLensFOV;

    /*package*/ final double MaxLensFOV;

    /*package*/ final short MinRange;

    /*package*/ final short MaxRange;

    public ZoomToRangeConfigS(
            short VideoSource,
            short Enable,
            byte UseSinglePointAlgorithm,
            double MinLensFOV,
            double MaxLensFOV,
            short MinRange,
            short MaxRange) {
        this.VideoSource = VideoSource;
        this.Enable = Enable;
        this.UseSinglePointAlgorithm = UseSinglePointAlgorithm;
        this.MinLensFOV = MinLensFOV;
        this.MaxLensFOV = MaxLensFOV;
        this.MinRange = MinRange;
        this.MaxRange = MaxRange;
    }

    public short getVideoSource() {
        return VideoSource;
    }

    /** video source to configure (which lens is connected to) */
    public short getEnable() {
        return Enable;
    }

    /** enable zoom-to-range for this video source/lens (1=enable) */
    public byte getUseSinglePointAlgorithm() {
        return UseSinglePointAlgorithm;
    }

    /** use a single point algorithm (min range and max fov only) instead of two points */
    public double getMinLensFOV() {
        return MinLensFOV;
    }

    /**
     * maximum lens (zoom) field-of-view in degrees
     *   range: 0 to 360.00 (divide by 100 to get value)
     */
    public double getMaxLensFOV() {
        return MaxLensFOV;
    }

    /**
     * minimum lens (zoom) field-of-view in degrees
     *   range: 0 to 360.00 (divide by 100 to get value)
     */
    public short getMinRange() {
        return MinRange;
    }

    /**
     * minimum range in centimeters, least significant word (lsw)
     * and most significant word (msw)
     * which corresponds to the maximum FOV of the lens
     * (divide by 100 to get meters)
     * maximum range in centimeters, least significant word (lsw)
     * and most significant word (msw)
     * which corresponds to the minimum FOV of the lens
     * (divide by 100 to get meters)  
     */
    public short getMaxRange() {
        return MaxRange;
    }

    @Override
    public String toString() {
        return "ZoomToRangeConfigS{" +
                "VideoSource=" + VideoSource +
                "," + "Enable=" + Enable +
                "," + "UseSinglePointAlgorithm=" + UseSinglePointAlgorithm +
                "," + "MinLensFOV=" + MinLensFOV +
                "," + "MaxLensFOV=" + MaxLensFOV +
                "," + "MinRange=" + MinRange +
                "," + "MaxRange=" + MaxRange +
        "}";
    }

}
