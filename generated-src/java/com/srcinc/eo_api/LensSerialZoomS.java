// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from EO_API.djinni

package com.srcinc.eo_api;

/** EO_API.djinni : IDL source for EO_API */
public final class LensSerialZoomS {


    /*package*/ final short LensType;

    /*package*/ final byte LensID;

    /*package*/ final byte VideoSource;

    /*package*/ final byte SerialPort;

    /*package*/ final byte ZoomCmd;

    /*package*/ final byte FocusCmd;

    /*package*/ final byte IrisCmd;

    /*package*/ final byte IrisAuto;

    /*package*/ final byte ZoomCal;

    /*package*/ final byte UseOldProtocol;

    /*package*/ final byte Enable2X;

    /*package*/ final double ZoomFov;

    /*package*/ final double MinFov;

    /*package*/ final double MaxFov;

    /*package*/ final short FocusPosition;

    public LensSerialZoomS(
            short LensType,
            byte LensID,
            byte VideoSource,
            byte SerialPort,
            byte ZoomCmd,
            byte FocusCmd,
            byte IrisCmd,
            byte IrisAuto,
            byte ZoomCal,
            byte UseOldProtocol,
            byte Enable2X,
            double ZoomFov,
            double MinFov,
            double MaxFov,
            short FocusPosition) {
        this.LensType = LensType;
        this.LensID = LensID;
        this.VideoSource = VideoSource;
        this.SerialPort = SerialPort;
        this.ZoomCmd = ZoomCmd;
        this.FocusCmd = FocusCmd;
        this.IrisCmd = IrisCmd;
        this.IrisAuto = IrisAuto;
        this.ZoomCal = ZoomCal;
        this.UseOldProtocol = UseOldProtocol;
        this.Enable2X = Enable2X;
        this.ZoomFov = ZoomFov;
        this.MinFov = MinFov;
        this.MaxFov = MaxFov;
        this.FocusPosition = FocusPosition;
    }

    public short getLensType() {
        return LensType;
    }

    /** lens type */
    public byte getLensID() {
        return LensID;
    }

    public byte getVideoSource() {
        return VideoSource;
    }

    /** video source lens is connected to */
    public byte getSerialPort() {
        return SerialPort;
    }

    /** tracker serial port lens is connected to (3-7, 0-2 are reserved) */
    public byte getZoomCmd() {
        return ZoomCmd;
    }

    /** zoom command (0=none, 1=narrow, 2=wide, 3=go to pos) */
    public byte getFocusCmd() {
        return FocusCmd;
    }

    /** focus command (0=none, 1=near, 2=far, 3=go to pos) */
    public byte getIrisCmd() {
        return IrisCmd;
    }

    /** iris command (0=none, 1=close, 2=open) */
    public byte getIrisAuto() {
        return IrisAuto;
    }

    /** automatic iris (0=disabled, 1=enabled/automatic) */
    public byte getZoomCal() {
        return ZoomCal;
    }

    /** perform zoom scale calibration (1=run now) */
    public byte getUseOldProtocol() {
        return UseOldProtocol;
    }

    /** use older lens communication protocol (LENS_COHU_MPC) */
    public byte getEnable2X() {
        return Enable2X;
    }

    /** enable 2X extender (LENS_FUJINON_D60) */
    public double getZoomFov() {
        return ZoomFov;
    }

    /**
     * zoom field-of-view in degrees
     *   range: 0 to 360.00 (divide by 100 to get value)
     */
    public double getMinFov() {
        return MinFov;
    }

    /**
     * minimum zoom field-of-view of the lens in degrees
     *   range: 0 to 360.00 (divide by 100 to get value)
     */
    public double getMaxFov() {
        return MaxFov;
    }

    /**
     * maximum zoom field-of-view of the lens in degrees
     *   range: 0 to 360.00 (divide by 100 to get value)
     * focus position
     */
    public short getFocusPosition() {
        return FocusPosition;
    }

    @Override
    public String toString() {
        return "LensSerialZoomS{" +
                "LensType=" + LensType +
                "," + "LensID=" + LensID +
                "," + "VideoSource=" + VideoSource +
                "," + "SerialPort=" + SerialPort +
                "," + "ZoomCmd=" + ZoomCmd +
                "," + "FocusCmd=" + FocusCmd +
                "," + "IrisCmd=" + IrisCmd +
                "," + "IrisAuto=" + IrisAuto +
                "," + "ZoomCal=" + ZoomCal +
                "," + "UseOldProtocol=" + UseOldProtocol +
                "," + "Enable2X=" + Enable2X +
                "," + "ZoomFov=" + ZoomFov +
                "," + "MinFov=" + MinFov +
                "," + "MaxFov=" + MaxFov +
                "," + "FocusPosition=" + FocusPosition +
        "}";
    }

}
