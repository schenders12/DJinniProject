// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from EO_API.djinni

package com.srcinc.eo_api;

public final class LensSerialIRZoomS {


    /*package*/ final short LensType;

    /*package*/ final byte VideoSource;

    /*package*/ final byte SerialPort;

    /*package*/ final byte ZoomCmd;

    /*package*/ final byte ZoomCal;

    /*package*/ final byte FocusCmd;

    /*package*/ final byte Polarity;

    /*package*/ final byte AGC;

    /*package*/ final byte DayMode;

    /*package*/ final byte HighSensitivity;

    /*package*/ final byte AutoCalibration;

    /*package*/ final byte LensCover;

    /*package*/ final byte FlirMenuCommand;

    /*package*/ final short ManualGain;

    /*package*/ final short ManualOffset;

    /*package*/ final short NonUniformityCorrectionTable;

    /*package*/ final double ZoomFov;

    /*package*/ final double MinFov;

    /*package*/ final double MaxFov;

    /*package*/ final short FocusPosition;

    public LensSerialIRZoomS(
            short LensType,
            byte VideoSource,
            byte SerialPort,
            byte ZoomCmd,
            byte ZoomCal,
            byte FocusCmd,
            byte Polarity,
            byte AGC,
            byte DayMode,
            byte HighSensitivity,
            byte AutoCalibration,
            byte LensCover,
            byte FlirMenuCommand,
            short ManualGain,
            short ManualOffset,
            short NonUniformityCorrectionTable,
            double ZoomFov,
            double MinFov,
            double MaxFov,
            short FocusPosition) {
        this.LensType = LensType;
        this.VideoSource = VideoSource;
        this.SerialPort = SerialPort;
        this.ZoomCmd = ZoomCmd;
        this.ZoomCal = ZoomCal;
        this.FocusCmd = FocusCmd;
        this.Polarity = Polarity;
        this.AGC = AGC;
        this.DayMode = DayMode;
        this.HighSensitivity = HighSensitivity;
        this.AutoCalibration = AutoCalibration;
        this.LensCover = LensCover;
        this.FlirMenuCommand = FlirMenuCommand;
        this.ManualGain = ManualGain;
        this.ManualOffset = ManualOffset;
        this.NonUniformityCorrectionTable = NonUniformityCorrectionTable;
        this.ZoomFov = ZoomFov;
        this.MinFov = MinFov;
        this.MaxFov = MaxFov;
        this.FocusPosition = FocusPosition;
    }

    public short getLensType() {
        return LensType;
    }

    /** lens type */
    public byte getVideoSource() {
        return VideoSource;
    }

    /** video source lens is connected to */
    public byte getSerialPort() {
        return SerialPort;
    }

    /** tracker serial port lens is connected to (3-7, 0-2 are reserved) */
    public byte getZoomCmd() {
        return ZoomCmd;
    }

    /** zoom command (0=none, 1=narrow, 2=wide, 3=go to pos) */
    public byte getZoomCal() {
        return ZoomCal;
    }

    /** perform zoom scale calibration (1=run now) */
    public byte getFocusCmd() {
        return FocusCmd;
    }

    /** focus command (0=none, 1=near, 2=far, 3=go to pos) */
    public byte getPolarity() {
        return Polarity;
    }

    /** image polarity (0=normal/white hot, 1=inverted/black hot) */
    public byte getAGC() {
        return AGC;
    }

    /** automatic gain control (0=disabled, 1=enabled/automatic) */
    public byte getDayMode() {
        return DayMode;
    }

    /** day mode enable (0=disabled/night, 1=enabled/day) */
    public byte getHighSensitivity() {
        return HighSensitivity;
    }

    /** high sensitivity enable (0=disabled/normal, 1=enabled/high) */
    public byte getAutoCalibration() {
        return AutoCalibration;
    }

    /** auto calibration enable (0=disabled, 1=enabled) */
    public byte getLensCover() {
        return LensCover;
    }

    /**Lens Cover (0=close, 1=open) */
    public byte getFlirMenuCommand() {
        return FlirMenuCommand;
    }

    public short getManualGain() {
        return ManualGain;
    }

    /** sensor gain (when AGC is disabled) */
    public short getManualOffset() {
        return ManualOffset;
    }

    /** sensor offset (when AGC is disabled) */
    public short getNonUniformityCorrectionTable() {
        return NonUniformityCorrectionTable;
    }

    /** non-uniformity correction table to apply */
    public double getZoomFov() {
        return ZoomFov;
    }

    /**
     * zoom field-of-view in degrees
     *   range: 0 to 360.00 (divide by 100 to get value)
     */
    public double getMinFov() {
        return MinFov;
    }

    /**
     * minimum zoom field-of-view of the lens in degrees
     *   range: 0 to 360.00 (divide by 100 to get value)
     */
    public double getMaxFov() {
        return MaxFov;
    }

    /**
     * maximum zoom field-of-view of the lens in degrees
     *   range: 0 to 360.00 (divide by 100 to get value)
     * focus position
     */
    public short getFocusPosition() {
        return FocusPosition;
    }

    @Override
    public String toString() {
        return "LensSerialIRZoomS{" +
                "LensType=" + LensType +
                "," + "VideoSource=" + VideoSource +
                "," + "SerialPort=" + SerialPort +
                "," + "ZoomCmd=" + ZoomCmd +
                "," + "ZoomCal=" + ZoomCal +
                "," + "FocusCmd=" + FocusCmd +
                "," + "Polarity=" + Polarity +
                "," + "AGC=" + AGC +
                "," + "DayMode=" + DayMode +
                "," + "HighSensitivity=" + HighSensitivity +
                "," + "AutoCalibration=" + AutoCalibration +
                "," + "LensCover=" + LensCover +
                "," + "FlirMenuCommand=" + FlirMenuCommand +
                "," + "ManualGain=" + ManualGain +
                "," + "ManualOffset=" + ManualOffset +
                "," + "NonUniformityCorrectionTable=" + NonUniformityCorrectionTable +
                "," + "ZoomFov=" + ZoomFov +
                "," + "MinFov=" + MinFov +
                "," + "MaxFov=" + MaxFov +
                "," + "FocusPosition=" + FocusPosition +
        "}";
    }

}
