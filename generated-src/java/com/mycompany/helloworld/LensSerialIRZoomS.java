// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from EO_API.djinni

package com.mycompany.helloworld;

public final class LensSerialIRZoomS {


    /*package*/ final short mLensType;

    /*package*/ final byte mVideoSource;

    /*package*/ final byte mSerialPort;

    /*package*/ final byte mZoomCmd;

    /*package*/ final byte mZoomCal;

    /*package*/ final byte mFocusCmd;

    /*package*/ final byte mPolarity;

    /*package*/ final byte mAGC;

    /*package*/ final byte mDayMode;

    /*package*/ final byte mHighSensitivity;

    /*package*/ final byte mAutoCalibration;

    /*package*/ final byte mLensCover;

    /*package*/ final byte mFlirMenuCommand;

    /*package*/ final short mManualGain;

    /*package*/ final short mManualOffset;

    /*package*/ final short mNonUniformityCorrectionTable;

    /*package*/ final double mZoomFov;

    /*package*/ final double mMinFov;

    /*package*/ final double mMaxFov;

    /*package*/ final short mFocusPosition;

    public LensSerialIRZoomS(
            short LensType,
            byte VideoSource,
            byte SerialPort,
            byte ZoomCmd,
            byte ZoomCal,
            byte FocusCmd,
            byte Polarity,
            byte AGC,
            byte DayMode,
            byte HighSensitivity,
            byte AutoCalibration,
            byte LensCover,
            byte FlirMenuCommand,
            short ManualGain,
            short ManualOffset,
            short NonUniformityCorrectionTable,
            double ZoomFov,
            double MinFov,
            double MaxFov,
            short FocusPosition) {
        this.mLensType = LensType;
        this.mVideoSource = VideoSource;
        this.mSerialPort = SerialPort;
        this.mZoomCmd = ZoomCmd;
        this.mZoomCal = ZoomCal;
        this.mFocusCmd = FocusCmd;
        this.mPolarity = Polarity;
        this.mAGC = AGC;
        this.mDayMode = DayMode;
        this.mHighSensitivity = HighSensitivity;
        this.mAutoCalibration = AutoCalibration;
        this.mLensCover = LensCover;
        this.mFlirMenuCommand = FlirMenuCommand;
        this.mManualGain = ManualGain;
        this.mManualOffset = ManualOffset;
        this.mNonUniformityCorrectionTable = NonUniformityCorrectionTable;
        this.mZoomFov = ZoomFov;
        this.mMinFov = MinFov;
        this.mMaxFov = MaxFov;
        this.mFocusPosition = FocusPosition;
    }

    public short getLensType() {
        return mLensType;
    }

    /** lens type */
    public byte getVideoSource() {
        return mVideoSource;
    }

    /** video source lens is connected to */
    public byte getSerialPort() {
        return mSerialPort;
    }

    /** tracker serial port lens is connected to (3-7, 0-2 are reserved) */
    public byte getZoomCmd() {
        return mZoomCmd;
    }

    /** zoom command (0=none, 1=narrow, 2=wide, 3=go to pos) */
    public byte getZoomCal() {
        return mZoomCal;
    }

    /** perform zoom scale calibration (1=run now) */
    public byte getFocusCmd() {
        return mFocusCmd;
    }

    /** focus command (0=none, 1=near, 2=far, 3=go to pos) */
    public byte getPolarity() {
        return mPolarity;
    }

    /** image polarity (0=normal/white hot, 1=inverted/black hot) */
    public byte getAGC() {
        return mAGC;
    }

    /** automatic gain control (0=disabled, 1=enabled/automatic) */
    public byte getDayMode() {
        return mDayMode;
    }

    /** day mode enable (0=disabled/night, 1=enabled/day) */
    public byte getHighSensitivity() {
        return mHighSensitivity;
    }

    /** high sensitivity enable (0=disabled/normal, 1=enabled/high) */
    public byte getAutoCalibration() {
        return mAutoCalibration;
    }

    /** auto calibration enable (0=disabled, 1=enabled) */
    public byte getLensCover() {
        return mLensCover;
    }

    /**Lens Cover (0=close, 1=open) */
    public byte getFlirMenuCommand() {
        return mFlirMenuCommand;
    }

    public short getManualGain() {
        return mManualGain;
    }

    /** sensor gain (when AGC is disabled) */
    public short getManualOffset() {
        return mManualOffset;
    }

    /** sensor offset (when AGC is disabled) */
    public short getNonUniformityCorrectionTable() {
        return mNonUniformityCorrectionTable;
    }

    /** non-uniformity correction table to apply */
    public double getZoomFov() {
        return mZoomFov;
    }

    /**
     * zoom field-of-view in degrees
     *   range: 0 to 360.00 (divide by 100 to get value)
     */
    public double getMinFov() {
        return mMinFov;
    }

    /**
     * minimum zoom field-of-view of the lens in degrees
     *   range: 0 to 360.00 (divide by 100 to get value)
     */
    public double getMaxFov() {
        return mMaxFov;
    }

    /**
     * maximum zoom field-of-view of the lens in degrees
     *   range: 0 to 360.00 (divide by 100 to get value)
     * focus position
     */
    public short getFocusPosition() {
        return mFocusPosition;
    }

    @Override
    public String toString() {
        return "LensSerialIRZoomS{" +
                "mLensType=" + mLensType +
                "," + "mVideoSource=" + mVideoSource +
                "," + "mSerialPort=" + mSerialPort +
                "," + "mZoomCmd=" + mZoomCmd +
                "," + "mZoomCal=" + mZoomCal +
                "," + "mFocusCmd=" + mFocusCmd +
                "," + "mPolarity=" + mPolarity +
                "," + "mAGC=" + mAGC +
                "," + "mDayMode=" + mDayMode +
                "," + "mHighSensitivity=" + mHighSensitivity +
                "," + "mAutoCalibration=" + mAutoCalibration +
                "," + "mLensCover=" + mLensCover +
                "," + "mFlirMenuCommand=" + mFlirMenuCommand +
                "," + "mManualGain=" + mManualGain +
                "," + "mManualOffset=" + mManualOffset +
                "," + "mNonUniformityCorrectionTable=" + mNonUniformityCorrectionTable +
                "," + "mZoomFov=" + mZoomFov +
                "," + "mMinFov=" + mMinFov +
                "," + "mMaxFov=" + mMaxFov +
                "," + "mFocusPosition=" + mFocusPosition +
        "}";
    }

}
