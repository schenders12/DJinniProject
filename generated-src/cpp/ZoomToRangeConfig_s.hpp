// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from EO_API.djinni

#pragma once

#include <cstdint>
#include <utility>

namespace eo_api {

struct ZoomToRangeConfigS final {
    int16_t VideoSource;
    /** video source to configure (which lens is connected to) */
    int16_t Enable;
    /** enable zoom-to-range for this video source/lens (1=enable) */
    int8_t UseSinglePointAlgorithm;
    /** use a single point algorithm (min range and max fov only) instead of two points */
    double MinLensFOV;
    /**
     * maximum lens (zoom) field-of-view in degrees
     *   range: 0 to 360.00 (divide by 100 to get value)
     */
    double MaxLensFOV;
    /**
     * minimum lens (zoom) field-of-view in degrees
     *   range: 0 to 360.00 (divide by 100 to get value)
     */
    int16_t MinRange;
    /**
     * minimum range in centimeters, least significant word (lsw)
     * and most significant word (msw)
     * which corresponds to the maximum FOV of the lens
     * (divide by 100 to get meters)
     * maximum range in centimeters, least significant word (lsw)
     * and most significant word (msw)
     * which corresponds to the minimum FOV of the lens
     * (divide by 100 to get meters)  
     */
    int16_t MaxRange;

    ZoomToRangeConfigS(int16_t VideoSource_,
                       int16_t Enable_,
                       int8_t UseSinglePointAlgorithm_,
                       double MinLensFOV_,
                       double MaxLensFOV_,
                       int16_t MinRange_,
                       int16_t MaxRange_)
    : VideoSource(std::move(VideoSource_))
    , Enable(std::move(Enable_))
    , UseSinglePointAlgorithm(std::move(UseSinglePointAlgorithm_))
    , MinLensFOV(std::move(MinLensFOV_))
    , MaxLensFOV(std::move(MaxLensFOV_))
    , MinRange(std::move(MinRange_))
    , MaxRange(std::move(MaxRange_))
    {}
};

}  // namespace eo_api
