// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from EO_API.djinni

#pragma once

#include <cstdint>
#include <utility>

namespace eo_api {

struct LensSerialIRZoomS final {
    int16_t LensType;
    /** lens type */
    int8_t VideoSource;
    /** video source lens is connected to */
    int8_t SerialPort;
    /** tracker serial port lens is connected to (3-7, 0-2 are reserved) */
    int8_t ZoomCmd;
    /** zoom command (0=none, 1=narrow, 2=wide, 3=go to pos) */
    int8_t ZoomCal;
    /** perform zoom scale calibration (1=run now) */
    int8_t FocusCmd;
    /** focus command (0=none, 1=near, 2=far, 3=go to pos) */
    int8_t Polarity;
    /** image polarity (0=normal/white hot, 1=inverted/black hot) */
    int8_t AGC;
    /** automatic gain control (0=disabled, 1=enabled/automatic) */
    int8_t DayMode;
    /** day mode enable (0=disabled/night, 1=enabled/day) */
    int8_t HighSensitivity;
    /** high sensitivity enable (0=disabled/normal, 1=enabled/high) */
    int8_t AutoCalibration;
    /** auto calibration enable (0=disabled, 1=enabled) */
    int8_t LensCover;
    /**Lens Cover (0=close, 1=open) */
    int8_t FlirMenuCommand;
    int16_t ManualGain;
    /** sensor gain (when AGC is disabled) */
    int16_t ManualOffset;
    /** sensor offset (when AGC is disabled) */
    int16_t NonUniformityCorrectionTable;
    /** non-uniformity correction table to apply */
    double ZoomFov;
    /**
     * zoom field-of-view in degrees
     *   range: 0 to 360.00 (divide by 100 to get value)
     */
    double MinFov;
    /**
     * minimum zoom field-of-view of the lens in degrees
     *   range: 0 to 360.00 (divide by 100 to get value)
     */
    double MaxFov;
    /**
     * maximum zoom field-of-view of the lens in degrees
     *   range: 0 to 360.00 (divide by 100 to get value)
     * focus position
     */
    int16_t FocusPosition;

    LensSerialIRZoomS(int16_t LensType_,
                      int8_t VideoSource_,
                      int8_t SerialPort_,
                      int8_t ZoomCmd_,
                      int8_t ZoomCal_,
                      int8_t FocusCmd_,
                      int8_t Polarity_,
                      int8_t AGC_,
                      int8_t DayMode_,
                      int8_t HighSensitivity_,
                      int8_t AutoCalibration_,
                      int8_t LensCover_,
                      int8_t FlirMenuCommand_,
                      int16_t ManualGain_,
                      int16_t ManualOffset_,
                      int16_t NonUniformityCorrectionTable_,
                      double ZoomFov_,
                      double MinFov_,
                      double MaxFov_,
                      int16_t FocusPosition_)
    : LensType(std::move(LensType_))
    , VideoSource(std::move(VideoSource_))
    , SerialPort(std::move(SerialPort_))
    , ZoomCmd(std::move(ZoomCmd_))
    , ZoomCal(std::move(ZoomCal_))
    , FocusCmd(std::move(FocusCmd_))
    , Polarity(std::move(Polarity_))
    , AGC(std::move(AGC_))
    , DayMode(std::move(DayMode_))
    , HighSensitivity(std::move(HighSensitivity_))
    , AutoCalibration(std::move(AutoCalibration_))
    , LensCover(std::move(LensCover_))
    , FlirMenuCommand(std::move(FlirMenuCommand_))
    , ManualGain(std::move(ManualGain_))
    , ManualOffset(std::move(ManualOffset_))
    , NonUniformityCorrectionTable(std::move(NonUniformityCorrectionTable_))
    , ZoomFov(std::move(ZoomFov_))
    , MinFov(std::move(MinFov_))
    , MaxFov(std::move(MaxFov_))
    , FocusPosition(std::move(FocusPosition_))
    {}
};

}  // namespace eo_api
